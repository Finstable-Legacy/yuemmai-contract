/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LiquidateV1Interface extends ethers.utils.Interface {
  functions: {
    "KAP20liquidateBorrow((address,uint256,uint256,address,uint256,uint256,address,uint256,uint256,uint256,address,address))": FunctionFragment;
    "KUBLending()": FunctionFragment;
    "SwapFactory()": FunctionFragment;
    "SwapRouter()": FunctionFragment;
    "errorCode()": FunctionFragment;
    "returnAmount()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "KAP20liquidateBorrow",
    values: [
      {
        lending: string;
        amountADesired: BigNumberish;
        amountAMin: BigNumberish;
        toSwap: string;
        amountBDesired: BigNumberish;
        amountBMin: BigNumberish;
        finalToken: string;
        input: BigNumberish;
        minReward: BigNumberish;
        deadline: BigNumberish;
        borrower: string;
        liquidator: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "KUBLending",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SwapFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SwapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "errorCode", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "returnAmount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "KAP20liquidateBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "KUBLending", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SwapFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SwapRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "errorCode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "returnAmount",
    data: BytesLike
  ): Result;

  events: {};
}

export class LiquidateV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LiquidateV1Interface;

  functions: {
    KAP20liquidateBorrow(
      args: {
        lending: string;
        amountADesired: BigNumberish;
        amountAMin: BigNumberish;
        toSwap: string;
        amountBDesired: BigNumberish;
        amountBMin: BigNumberish;
        finalToken: string;
        input: BigNumberish;
        minReward: BigNumberish;
        deadline: BigNumberish;
        borrower: string;
        liquidator: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    KUBLending(overrides?: CallOverrides): Promise<[string]>;

    SwapFactory(overrides?: CallOverrides): Promise<[string]>;

    SwapRouter(overrides?: CallOverrides): Promise<[string]>;

    errorCode(overrides?: CallOverrides): Promise<[BigNumber]>;

    returnAmount(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  KAP20liquidateBorrow(
    args: {
      lending: string;
      amountADesired: BigNumberish;
      amountAMin: BigNumberish;
      toSwap: string;
      amountBDesired: BigNumberish;
      amountBMin: BigNumberish;
      finalToken: string;
      input: BigNumberish;
      minReward: BigNumberish;
      deadline: BigNumberish;
      borrower: string;
      liquidator: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  KUBLending(overrides?: CallOverrides): Promise<string>;

  SwapFactory(overrides?: CallOverrides): Promise<string>;

  SwapRouter(overrides?: CallOverrides): Promise<string>;

  errorCode(overrides?: CallOverrides): Promise<BigNumber>;

  returnAmount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    KAP20liquidateBorrow(
      args: {
        lending: string;
        amountADesired: BigNumberish;
        amountAMin: BigNumberish;
        toSwap: string;
        amountBDesired: BigNumberish;
        amountBMin: BigNumberish;
        finalToken: string;
        input: BigNumberish;
        minReward: BigNumberish;
        deadline: BigNumberish;
        borrower: string;
        liquidator: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    KUBLending(overrides?: CallOverrides): Promise<string>;

    SwapFactory(overrides?: CallOverrides): Promise<string>;

    SwapRouter(overrides?: CallOverrides): Promise<string>;

    errorCode(overrides?: CallOverrides): Promise<BigNumber>;

    returnAmount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    KAP20liquidateBorrow(
      args: {
        lending: string;
        amountADesired: BigNumberish;
        amountAMin: BigNumberish;
        toSwap: string;
        amountBDesired: BigNumberish;
        amountBMin: BigNumberish;
        finalToken: string;
        input: BigNumberish;
        minReward: BigNumberish;
        deadline: BigNumberish;
        borrower: string;
        liquidator: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    KUBLending(overrides?: CallOverrides): Promise<BigNumber>;

    SwapFactory(overrides?: CallOverrides): Promise<BigNumber>;

    SwapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    errorCode(overrides?: CallOverrides): Promise<BigNumber>;

    returnAmount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    KAP20liquidateBorrow(
      args: {
        lending: string;
        amountADesired: BigNumberish;
        amountAMin: BigNumberish;
        toSwap: string;
        amountBDesired: BigNumberish;
        amountBMin: BigNumberish;
        finalToken: string;
        input: BigNumberish;
        minReward: BigNumberish;
        deadline: BigNumberish;
        borrower: string;
        liquidator: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    KUBLending(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SwapFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SwapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    errorCode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    returnAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
